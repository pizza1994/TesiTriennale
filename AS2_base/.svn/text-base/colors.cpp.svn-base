/**
 @author    Marco Livesu (marco.livesu@gmail.com)
 @copyright Marco Livesu 2014.
*/

#include "colors.h"

#include <algorithm>
#include <assert.h>
#include <cmath>

void scattered_color(int n_colors, int pos, float * rgb)
{
    float hsv[3] = { (float)pos/(float)(n_colors-1) * 360.0 , 1.0 , 1.0 };

    HSV2RGB(rgb, hsv);
}


// HSV to RGB conversion coming from:
// http://www.cs.rit.edu/~ncs/color/t_convert.html
//
void HSV2RGB(float * rgb, const float * hsv)
{
	float h = hsv[0];
	float s = hsv[1];
	float v = hsv[2];

	float *r = &(rgb[0]);
	float *g = &(rgb[1]);
	float *b = &(rgb[2]);

	int i;
	float f, p, q, t;

	if( s == 0 ) {
		// achromatic (grey)
		*r = *g = *b = v;
		return;
	}

	h /= 60;			// sector 0 to 5
	i = floor( h );
	f = h - i;			// factorial part of h
	p = v * ( 1 - s );
	q = v * ( 1 - s * f );
	t = v * ( 1 - s * ( 1 - f ) );

	switch( i ) {
		case 0:
			*r = v;
			*g = t;
			*b = p;
			break;
		case 1:
			*r = q;
			*g = v;
			*b = p;
			break;
		case 2:
			*r = p;
			*g = v;
			*b = t;
			break;
		case 3:
			*r = p;
			*g = q;
			*b = v;
			break;
		case 4:
			*r = t;
			*g = p;
			*b = v;
			break;
		default:		// case 5:
			*r = v;
			*g = p;
			*b = q;
			break;
	}
}

